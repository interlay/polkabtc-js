import * as interbtcIndex from "@interlay/interbtc-index-client";

// The generated client contains the following autogenerated middleware helpers, which must be filtered out
const GeneratedMiddlewareFns = ["withMiddleware", "withPreMiddleware", "withPostMiddleware"] as const;
type GeneratedMiddlewareFns = typeof GeneratedMiddlewareFns[number];
// For every 'foo() => Promise<T>' function, the generated client
// has a 'fooRaw() => <Promise<ApiResponse<T>>' counterpart. These must be filtered out
type RawApiResponse = Promise<interbtcIndex.ApiResponse<any>>;

export type IndexAPI = Pick<
    interbtcIndex.IndexApi,
    {
        [ApiFn in keyof interbtcIndex.IndexApi]-?: ReturnType<interbtcIndex.IndexApi[ApiFn]> extends RawApiResponse
            ? never
            : ApiFn extends GeneratedMiddlewareFns
            ? never
            : ApiFn;
    }[keyof interbtcIndex.IndexApi]
>;

export const DefaultIndexAPI: (configuration: interbtcIndex.Configuration) => IndexAPI = (configuration) => {
    const index = new interbtcIndex.IndexApi(configuration);

    const explicitWrappers = {
        // TODO: when Monetary is added to stats, add wrappers decoding here
    };

    const excludeFromThinWrappers = (key: string) =>
        Object.keys(explicitWrappers).includes(key) ||
        (GeneratedMiddlewareFns as readonly string[]).includes(key) ||
        key.includes("Raw") ||
        key === "constructor";
    const keys = (Object.getOwnPropertyNames(Object.getPrototypeOf(index)) as (keyof typeof index)[]).filter(
        (apiName) => !excludeFromThinWrappers(apiName)
    );

    const thinWrappers = Object.fromEntries(
        keys.map((apiName) => {
            return [
                apiName,
                // all functions only have one arg
                (arg?: any) => {
                    return index[apiName](arg);
                },
            ];
        })
    ) as Omit<interbtcIndex.IndexApi, keyof typeof explicitWrappers>;

    return {
        ...explicitWrappers,
        ...thinWrappers,
    };
};
